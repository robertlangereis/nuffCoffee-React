{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport { storeJwt, socketIo } from './middleware';\nimport SocketIO from './socketio';\nconst reducer = combineReducers(reducers);\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f;\nconst socket = new SocketIO();\nconst enhancer = compose(applyMiddleware(ReduxThunk, storeJwt, socketIo(socket)), devTools);\nconst store = createStore(reducer, enhancer); // when JWT was coming from localStorage, connect via websockets\n\nconst initialCurrentUser = store.getState().currentUser;\n\nif (initialCurrentUser) {\n  socket.connect(store.dispatch, initialCurrentUser.jwt);\n}\n\nexport default store;","map":{"version":3,"sources":["/Users/robertlangereis/Google Drive/solo-projects/nuffcoffee-web/Frontend/src/store.js"],"names":["createStore","applyMiddleware","combineReducers","compose","ReduxThunk","reducers","storeJwt","socketIo","SocketIO","reducer","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","f","socket","enhancer","store","initialCurrentUser","getState","currentUser","connect","dispatch","jwt"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,EAAuDC,OAAvD,QAAqE,OAArE;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,cAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,OAAO,GAAGP,eAAe,CAACG,QAAD,CAA/B;AAEA,MAAMK,QAAQ,GAAGC,MAAM,CAACC,4BAAP,GAAsCD,MAAM,CAACC,4BAAP,EAAtC,GAA8EC,CAAC,IAAIA,CAApG;AAEA,MAAMC,MAAM,GAAG,IAAIN,QAAJ,EAAf;AAEA,MAAMO,QAAQ,GAAGZ,OAAO,CACvBF,eAAe,CAACG,UAAD,EAAaE,QAAb,EAAuBC,QAAQ,CAACO,MAAD,CAA/B,CADQ,EAEvBJ,QAFuB,CAAxB;AAKA,MAAMM,KAAK,GAAGhB,WAAW,CAACS,OAAD,EAAUM,QAAV,CAAzB,C,CAEA;;AACA,MAAME,kBAAkB,GAAGD,KAAK,CAACE,QAAN,GAAiBC,WAA5C;;AACA,IAAIF,kBAAJ,EAAwB;AACtBH,EAAAA,MAAM,CAACM,OAAP,CAAeJ,KAAK,CAACK,QAArB,EAA+BJ,kBAAkB,CAACK,GAAlD;AACD;;AAED,eAAeN,KAAf","sourcesContent":["import {createStore, applyMiddleware, combineReducers, compose} from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport reducers from './reducers'\nimport {storeJwt, socketIo} from './middleware'\nimport SocketIO from './socketio'\n\nconst reducer = combineReducers(reducers)\n\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n\nconst socket = new SocketIO()\n\nconst enhancer = compose(\n\tapplyMiddleware(ReduxThunk, storeJwt, socketIo(socket)),\n\tdevTools\n)\n\nconst store = createStore(reducer, enhancer)\n\n// when JWT was coming from localStorage, connect via websockets\nconst initialCurrentUser = store.getState().currentUser\nif (initialCurrentUser) {\n  socket.connect(store.dispatch, initialCurrentUser.jwt)\n}\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}