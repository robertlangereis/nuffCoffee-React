{"ast":null,"code":"import * as request from 'superagent';\nimport { baseUrl } from '../constants';\nimport { isExpired } from '../jwt';\nexport const ADD_USER = 'ADD_USER';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const UPDATE_USERS = 'UPDATE_USERS';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_FAILED = 'USER_LOGIN_FAILED';\nexport const USER_LOGOUT = 'USER_LOGOUT';\nexport const USER_SIGNUP_SUCCESS = 'USER_SIGNUP_SUCCESS';\nexport const USER_SIGNUP_FAILED = 'USER_SIGNUP_FAILED';\nexport const logout = () => ({\n  type: USER_LOGOUT\n});\n\nconst userLoginSuccess = login => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: login\n});\n\nconst userLoginFailed = error => ({\n  type: USER_LOGIN_FAILED,\n  payload: error || 'Unknown error'\n});\n\nconst userSignupFailed = error => ({\n  type: USER_SIGNUP_FAILED,\n  payload: error || 'Unknown error'\n});\n\nconst userSignupSuccess = () => ({\n  type: USER_SIGNUP_SUCCESS\n});\n\nconst updateUsers = users => ({\n  type: UPDATE_USERS,\n  payload: users\n});\n\nexport const login = (email, password) => dispatch => request.post(\"\".concat(baseUrl, \"/logins\")).send({\n  email,\n  password\n}).then(result => dispatch(userLoginSuccess(result.body))).catch(err => {\n  if (err.status === 400) {\n    dispatch(userLoginFailed(err.response.body.message));\n  } else {\n    console.error(err);\n  }\n});\nexport const signup = (email, password) => dispatch => request.post(\"\".concat(baseUrl, \"/users\")).send({\n  firstName: email,\n  lastName: email,\n  email,\n  password\n}).then(result => {\n  dispatch(userSignupSuccess());\n}).catch(err => {\n  if (err.status === 400) {\n    dispatch(userSignupFailed(err.response.body.message));\n  } else {\n    console.error(err);\n  }\n});\nexport const getUsers = () => (dispatch, getState) => {\n  const state = getState();\n  if (!state.currentUser) return null;\n  const jwt = state.currentUser.jwt;\n  if (isExpired(jwt)) return dispatch(logout());\n  request.get(\"\".concat(baseUrl, \"/users\")).set('Authorization', \"Bearer \".concat(jwt)).then(result => dispatch(updateUsers(result.body))).catch(err => console.error(err));\n};","map":{"version":3,"sources":["/Users/robertlangereis/Google Drive/solo-projects/nuffcoffee-web/Frontend/src/actions/users.js"],"names":["request","baseUrl","isExpired","ADD_USER","UPDATE_USER","UPDATE_USERS","USER_LOGIN_SUCCESS","USER_LOGIN_FAILED","USER_LOGOUT","USER_SIGNUP_SUCCESS","USER_SIGNUP_FAILED","logout","type","userLoginSuccess","login","payload","userLoginFailed","error","userSignupFailed","userSignupSuccess","updateUsers","users","email","password","dispatch","post","send","then","result","body","catch","err","status","response","message","console","signup","firstName","lastName","getUsers","getState","state","currentUser","jwt","get","set"],"mappings":"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","sourcesContent":["import * as request from 'superagent'\nimport {baseUrl} from '../constants'\nimport {isExpired} from '../jwt'\n\nexport const ADD_USER = 'ADD_USER'\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_USERS = 'UPDATE_USERS'\n\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\nexport const USER_LOGIN_FAILED = 'USER_LOGIN_FAILED'\n\nexport const USER_LOGOUT = 'USER_LOGOUT'\n\nexport const USER_SIGNUP_SUCCESS = 'USER_SIGNUP_SUCCESS'\nexport const USER_SIGNUP_FAILED = 'USER_SIGNUP_FAILED'\n\nexport const logout = () => ({\n  type: USER_LOGOUT\n})\n\nconst userLoginSuccess = (login) => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: login\n})\n\nconst userLoginFailed = (error) => ({\n  type: USER_LOGIN_FAILED,\n  payload: error || 'Unknown error'\n})\n\nconst userSignupFailed = (error) => ({\n  type: USER_SIGNUP_FAILED,\n  payload: error || 'Unknown error'\n})\n\nconst userSignupSuccess = () => ({\n  type: USER_SIGNUP_SUCCESS\n})\n\nconst updateUsers = (users) => ({\n  type: UPDATE_USERS,\n  payload: users\n})\n\nexport const login = (email, password) => (dispatch) =>\n\trequest\n\t\t.post(`${baseUrl}/logins`)\n    .send({email, password})\n    .then(result => dispatch(userLoginSuccess(result.body)))\n    .catch(err => {\n    \tif (err.status === 400) {\n    \t\tdispatch(userLoginFailed(err.response.body.message))\n    \t}\n    \telse {\n    \t\tconsole.error(err)\n    \t}\n    })\n\nexport const signup = (email, password) => (dispatch) =>\n\trequest\n\t\t.post(`${baseUrl}/users`)\n\t\t.send({ firstName: email, lastName: email, email, password })\n\t\t.then(result => {\n\t\t\tdispatch(userSignupSuccess())\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.status === 400) {\n\t\t\t\tdispatch(userSignupFailed(err.response.body.message))\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.error(err)\n\t\t\t}\n\t\t})\n\nexport const getUsers = () => (dispatch, getState) => {\n  const state = getState()\n  if (!state.currentUser) return null\n  const jwt = state.currentUser.jwt\n  if (isExpired(jwt)) return dispatch(logout())\n\n  request\n    .get(`${baseUrl}/users`)\n    .set('Authorization', `Bearer ${jwt}`)\n    .then(result => dispatch(updateUsers(result.body)))\n    .catch(err => console.error(err))\n}\n"]},"metadata":{},"sourceType":"module"}